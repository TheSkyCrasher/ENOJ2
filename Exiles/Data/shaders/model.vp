#version 400

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 texCoord;
layout (location = 2) in vec3 normal;
layout (location = 3) in vec3 tangent;
layout (location = 4) in ivec4 boneIndices;
layout (location = 5) in vec4 boneWeights;

out vec2 fTexCoord;
out vec3 fNormal;
out vec3 fTangent;
out vec3 fWorldPos;
out vec4 fShadowCoord;

uniform mat4 lightMVP;
uniform mat4 MVP;
uniform mat4 MP;
uniform mat4 boneMatrices[100];

void main()
{
	mat4 transformMatrix;
	if (boneWeights != vec4(0))
	{
		vec4 bWeights = boneWeights;
		bWeights.w = 1.0 - dot(bWeights.xyz, vec3(1.0, 1.0, 1.0));

		transformMatrix = bWeights.x * boneMatrices[boneIndices.x];
		transformMatrix += bWeights.y * boneMatrices[boneIndices.y];
		transformMatrix += bWeights.z * boneMatrices[boneIndices.z];
		transformMatrix += bWeights.w * boneMatrices[boneIndices.w];
	} else
		transformMatrix = mat4(1);

	gl_Position = MVP * transformMatrix * vec4(position, 1.0);
	fTexCoord = texCoord;
	fNormal = (MP * transformMatrix * vec4(normal, 0.0)).xyz;
	fTangent = (MP * transformMatrix * vec4(tangent, 0.0)).xyz;
	fWorldPos = (MP * transformMatrix * vec4(position, 0.0)).xyz;
	fShadowCoord = lightMVP * MP * transformMatrix * vec4(position, 1.0);
}